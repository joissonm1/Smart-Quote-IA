generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  createdAt       DateTime         @default(now())
  name            String
  updatedAt       DateTime         @updatedAt
  role            Role
  aiConversations AIConversation[]
  logs            Log[]
  quotations      Quotation[]
}

model Supplier {
  id             String           @id @default(cuid())
  name           String
  email          String?
  phone          String?
  address        String?
  website        String?
  createdAt      DateTime         @default(now())
  products       Product[]
  quotationItems QuotationItem[]
  ranking        SupplierRanking?
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String?
  basePrice      Float
  supplierId     String
  supplier       Supplier        @relation(fields: [supplierId], references: [id])
  quotationItems QuotationItem[]
}

model QuotationRequest {
  id          String        @id @default(cuid())
  requester   String
  email       String
  description String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  attachments Attachment[]
  quotations  Quotation[]
}

model Quotation {
  id            String           @id @default(cuid())
  requestId     String
  managerId     String?
  totalValue    Float
  COMPLETED      Boolean          @default(false)
  autoGenerated Boolean          @default(true)
  createdAt     DateTime         @default(now())
  customerId    String?
  Approval      Approval[]
  manager       User?            @relation(fields: [managerId], references: [id])
  request       QuotationRequest @relation(fields: [requestId], references: [id])
  items         QuotationItem[]
  Customer      Customer[]       @relation("CustomerToQuotation")
}

model QuotationItem {
  id          String    @id @default(cuid())
  quotationId String
  productId   String?
  supplierId  String
  quantity    Int
  unitPrice   Float
  description String    @default("Unknown item")
  total       Float     @default(0.0)
  product     Product?  @relation(fields: [productId], references: [id])
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
}

model Log {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   Json
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model AIConversation {
  id        String   @id @default(cuid())
  userId    String
  question  String
  answer    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model SupplierRanking {
  id          String   @id @default(cuid())
  supplierId  String   @unique
  score       Int      @default(0)
  lastUpdated DateTime @default(now())
  supplier    Supplier @relation(fields: [supplierId], references: [id])
}

model Attachment {
  id        String           @id @default(cuid())
  requestId String
  fileName  String
  fileUrl   String
  fileType  String
  createdAt DateTime         @default(now())
  request   QuotationRequest @relation(fields: [requestId], references: [id])
}

model Approval {
  id          String    @id
  quotationId String
  status      String
  reason      String?
  createdAt   DateTime  @default(now())
  Quotation   Quotation @relation(fields: [quotationId], references: [id])
}

model Customer {
  id        String      @id
  name      String
  email     String?
  phone     String?
  location  String?
  status    String
  createdAt DateTime    @default(now())
  Quotation Quotation[] @relation("CustomerToQuotation")
}

model QuotationGenerated {
  id        String         @id @default(uuid())
  requestId String
  jsonData  Json
  createdAt DateTime       @default(now()) @db.Timestamp(6)
  status    RequestStatus? @default(PENDING)
}

enum RequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum Role {
  ADMIN
  MANAGER
}
