// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  password        String
  role            Role
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  quotations      Quotation[]      // Inverso de Quotation.manager
  logs            Log[]
  aiConversations AIConversation[] // Inverso de AIConversation.user
}

model Supplier {
  id              String           @id @default(cuid())
  name            String
  email           String?
  phone           String?
  address         String?
  website         String?
  products        Product[]        // Inverso de Product.supplier
  ranking         SupplierRanking?
  createdAt       DateTime         @default(now())
  quotationItems  QuotationItem[]  // Inverso de QuotationItem.supplier
}

model Product {
  id             String           @id @default(cuid())
  name           String
  description    String?
  basePrice      Float
  supplierId     String
  supplier       Supplier         @relation(fields: [supplierId], references: [id])
  quotationItems QuotationItem[]  // Inverso de QuotationItem.product
}

model QuotationRequest {
  id          String       @id @default(cuid())
  requester   String
  email       String
  description String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  quotations  Quotation[]
  attachments Attachment[]
}

model Quotation {
  id            String         @id @default(cuid())
  requestId     String
  request       QuotationRequest @relation(fields: [requestId], references: [id])
  managerId     String?
  manager       User?          @relation(fields: [managerId], references: [id])
  totalValue    Float
  approved      Boolean        @default(false)
  autoGenerated Boolean        @default(true)
  createdAt     DateTime       @default(now())
  items         QuotationItem[]
}

model QuotationItem {
  id          String    @id @default(cuid())
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  productId   String?
  product     Product?  @relation(fields: [productId], references: [id])
  supplierId  String
  supplier    Supplier  @relation(fields: [supplierId], references: [id])
  quantity    Int
  unitPrice   Float
}

model Log {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  details   Json
  createdAt DateTime @default(now())
}

model AIConversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model SupplierRanking {
  id          String   @id @default(cuid())
  supplierId  String   @unique
  supplier    Supplier @relation(fields: [supplierId], references: [id])
  score       Int      @default(0) // Ranking baseado em desempenho
  lastUpdated DateTime @default(now())
}

model Attachment {
  id        String           @id @default(cuid())
  requestId String
  request   QuotationRequest @relation(fields: [requestId], references: [id])
  fileName  String
  fileUrl   String
  fileType  String
  createdAt DateTime         @default(now())
}

enum RequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum Role {
  ADMIN
  MANAGER
}
